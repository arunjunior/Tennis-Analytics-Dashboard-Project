create database tennis_analytics_db;
use tennis_analytics_db;
show tables;
select * from categories;
select * from competitions;
select * from complexes;
select * from venues;
select * from competitors;
select * from competitor_rankings;


-- 1.List all competitions along with their category name
SELECT c.competition_id, c.competition_name, cat.category_name
FROM Competitions c
LEFT JOIN Categories cat ON c.category_id = cat.category_id;

-- 2.Count the number of competitions in each category
SELECT cat.category_name, COUNT(c.competition_id) AS competition_count
FROM Competitions c
LEFT JOIN Categories cat ON c.category_id = cat.category_id
GROUP BY cat.category_name
ORDER BY competition_count DESC;

-- 3.Find all competitions of type 'doubles'
SELECT competition_id, competition_name, type, gender
FROM Competitions
WHERE type = 'doubles';

-- 4.Get competitions that belong to a specific category (e.g., ITF Men)
SELECT c.competition_id, c.competition_name
FROM Competitions c
JOIN Categories cat ON c.category_id = cat.category_id
WHERE cat.category_name = 'ITF Men';

-- 5.Identify parent competitions and their sub-competitions
SELECT
    parent.competition_id AS parent_id,
    parent.competition_name AS parent_name,
    sub.competition_id AS sub_id,
    sub.competition_name AS sub_name
FROM Competitions parent
LEFT JOIN Competitions sub ON sub.parent_id = parent.competition_id
WHERE sub.parent_id IS NOT NULL;

-- 6.Analyze the distribution of competition types by category
SELECT
    cat.category_name,
    c.type,
    COUNT(c.competition_id) AS count
FROM Competitions c
LEFT JOIN Categories cat ON c.category_id = cat.category_id
GROUP BY cat.category_name, c.type
ORDER BY cat.category_name, count DESC;

-- 7.List all competitions with no parent (top-level competitions)
SELECT competition_id, competition_name
FROM Competitions
WHERE parent_id IS NULL;

-- 1.List all venues along with their associated complex name
SELECT v.venue_id, v.venue_name, c.complex_name
FROM Venues v
LEFT JOIN Complexes c ON v.complex_id = c.complex_id;

-- 2.Count the number of venues in each complex
SELECT c.complex_name, COUNT(v.venue_id) AS venue_count
FROM Complexes c
LEFT JOIN Venues v ON v.complex_id = c.complex_id
GROUP BY c.complex_name
ORDER BY venue_count DESC;

-- 3.Get details of venues in a specific country (e.g., Chile)
SELECT venue_id, venue_name, city_name, country_name, timezone
FROM Venues
WHERE country_name = 'Chile';

-- 4.Identify all venues and their timezones
SELECT venue_id, venue_name, timezone
FROM Venues;

-- 5.Find complexes that have more than one venue
SELECT c.complex_name, COUNT(v.venue_id) AS venue_count
FROM Complexes c
LEFT JOIN Venues v ON v.complex_id = c.complex_id
GROUP BY c.complex_name
HAVING COUNT(v.venue_id) > 1
ORDER BY venue_count DESC;

-- 6.List venues grouped by country
SELECT country_name, COUNT(venue_id) AS venue_count
FROM Venues
GROUP BY country_name
ORDER BY venue_count DESC;

-- 7.Find all venues for a specific complex (e.g., Nacional)
SELECT v.venue_id, v.venue_name, v.city_name, v.country_name
FROM Venues v
JOIN Complexes c ON v.complex_id = c.complex_id
WHERE c.complex_name = 'Kindarena';

-- 1.Get all competitors with their rank and points
SELECT
    c.competitor_id,
    c.name,
    cr.rank,
    cr.points
FROM Competitors c
JOIN Competitor_Rankings cr ON c.competitor_id = cr.competitor_id;

-- 2.Find competitors ranked in the top 5
SELECT
    c.competitor_id,
    c.name,
    cr.rank,
    cr.points
FROM Competitors c
JOIN Competitor_Rankings cr ON c.competitor_id = cr.competitor_id
WHERE cr.rank <= 5
ORDER BY cr.rank;

-- 3.List competitors with no rank movement (stable rank)
SELECT
    c.competitor_id,
    c.name,
    cr.rank,
    cr.movement
FROM Competitors c
JOIN Competitor_Rankings cr ON c.competitor_id = cr.competitor_id
WHERE cr.movement = 0;

-- 4.Get the total points of competitors from a specific country (e.g., Croatia)
SELECT
    c.country,
    SUM(cr.points) AS total_points
FROM Competitors c
JOIN Competitor_Rankings cr ON c.competitor_id = cr.competitor_id
WHERE c.country = 'Australia'
GROUP BY c.country;

-- 5.Count the number of competitors per country
SELECT
    c.country,
    COUNT(DISTINCT c.competitor_id) AS competitor_count
FROM Competitors c
JOIN Competitor_Rankings cr ON c.competitor_id = cr.competitor_id
GROUP BY c.country
ORDER BY competitor_count DESC;

-- 6.Find competitors with the highest points in the current week
SELECT
    c.competitor_id,
    c.name,
    cr.rank,
    cr.points
FROM Competitors c
JOIN Competitor_Rankings cr ON c.competitor_id = cr.competitor_id
WHERE cr.points = (SELECT MAX(points) FROM Competitor_Rankings)
ORDER BY cr.rank;
